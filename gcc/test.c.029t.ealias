
;; Function _mm256_set1_pd (_mm256_set1_pd, funcdef_no=788, return=vector_type, decl_uid=6304, cgraph_uid=788)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
__A = &NONLOCAL
D.6747_2 = __A
D.6747_2 = __A
D.6747_2 = __A
D.6747_2 = __A
ESCAPED = D.6747_2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__A = { NONLOCAL }
D.6747_2 = { NONLOCAL } same as __A


Alias information for _mm256_set1_pd

Aliased symbols

.MEM, UID D.6749, void, is global, default def: .MEM_3(D)

Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


_mm256_set1_pd (double __A)
{
  __m256d D.6747;

<bb 2>:
  gimple_assign <constructor, D.6747_2, {__A_1(D), __A_1(D), __A_1(D), __A_1(D)}, NULL>
  gimple_return <D.6747_2>

}



;; Function main (main, funcdef_no=812, return=integer_type, decl_uid=6567, cgraph_uid=812)

No longer having address taken: __op1_copy.28
No longer having address taken: res.30
No longer having address taken: __op1_patch.37

Symbols to be put in SSA form
{ __op1_patch.37 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 13
Number of blocks to update: 12 ( 92%)


Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
a_4 = &NONLOCAL
c_6 = &NONLOCAL
__op1_copy.28 = &NONLOCAL
res.0_7 = &NONLOCAL
res.30 = &NONLOCAL
__op0_exp0.29_9 = res.30
__op0_exp0.29_10 = __op0_exp0.29_9 + UNKNOWN
__op1_exp1.32_12 = __op1_copy.28
__op1_exp1.32_13 = __op1_exp1.32_12 + UNKNOWN
__exp_delta.34_14 = __op1_exp1.32_13
__exp_delta.34_14 = __op0_exp0.29_10
__op1_patch.35_15 = __op1_exp1.32_13
__op1_patch.35_15 = &NONLOCAL
__op1_patch.35_16 = __op1_patch.35_15 + UNKNOWN
__op1_patch.37_72 = __op1_patch.35_16
__op0_patch.38_18 = __op1_patch.37_72
__op0_patch_neg.39_19 = __op0_patch.38_18
__op0_vpatch.41_73 = __op0_patch_neg.39_19
__op0_vpatch.41_73 = __op0_patch.38_18
__op0_vpatch.41_73 = &NONLOCAL
__op0_vpatch.41_73 = &NONLOCAL
__op0_vpatch.41_20 = __op0_vpatch.41_73
res.0_21 = __op0_vpatch.41_20
res.0_21 = &NONLOCAL
res.0_1 = &NONLOCAL
res.0_1 = res.0_21
res = res.0_1
res.1_22 = res
res.5 = res.1_22
__lhs_v1.2_24 = res.5
__lhs_v2.3_26 = res.5
c.9 = &NONLOCAL
__rhs_v1.6_28 = c.9
__rhs_v2.7_30 = c.9
__rtn_v1.10_32 = D.6705_31
__rtn_v2.11_34 = D.6706_33
ESCAPED = __rtn_v1.10_32
ESCAPED = __rtn_v2.11_34
ESCAPED = &res.5
ESCAPED = &c.9
ESCAPED = &READONLY
__rtn_v1.10_36 = NONLOCAL
__rtn_v1.10_2 = __rtn_v1.10_32
__rtn_v1.10_2 = __rtn_v1.10_36
res.1_41 = res
res.18 = res.1_41
__lhs_v1.15_43 = res.18
__lhs_v2.16_45 = res.18
a.22 = &NONLOCAL
__rhs_v1.19_47 = a.22
__rhs_v2.20_49 = a.22
__rtn_v1.23_51 = D.6724_50
__rtn_v2.24_53 = D.6725_52
ESCAPED = __rtn_v1.23_51
ESCAPED = __rtn_v2.24_53
ESCAPED = &res.18
ESCAPED = &a.22
ESCAPED = &READONLY
__rtn_v1.23_55 = NONLOCAL
__rtn_v1.23_3 = __rtn_v1.23_51
__rtn_v1.23_3 = __rtn_v1.23_55
D.6691_62 = &ANYTHING
D.6692_63 = &ANYTHING
ESCAPED = &READONLY
ESCAPED = D.6692_63
ESCAPED = D.6691_62
ESCAPED = &READONLY
ESCAPED = &res
ESCAPED = &READONLY
D.6691_60 = &ANYTHING
D.6692_61 = &ANYTHING
ESCAPED = &READONLY
ESCAPED = D.6692_61
ESCAPED = D.6691_60
ESCAPED = &READONLY
ESCAPED = &res
ESCAPED = &READONLY

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { ANYTHING READONLY ESCAPED NONLOCAL res res.5 c.9 res.18 a.22 }
NONLOCAL = { ESCAPED NONLOCAL } same as __rtn_v1.10_36
STOREDANYTHING = { ESCAPED NONLOCAL }
INTEGER = { ANYTHING }
a_4 = { NONLOCAL }
c_6 = { NONLOCAL } same as a_4
__op1_copy.28 = { NONLOCAL } same as a_4
res.0_7 = { NONLOCAL } same as a_4
res.30 = { NONLOCAL } same as a_4
__op0_exp0.29_9 = { NONLOCAL } same as a_4
__op0_exp0.29_10 = { ESCAPED NONLOCAL }
__op1_exp1.32_12 = { NONLOCAL } same as a_4
__op1_exp1.32_13 = { ESCAPED NONLOCAL }
__exp_delta.34_14 = { ESCAPED NONLOCAL }
__op1_patch.35_15 = { ESCAPED NONLOCAL }
__op1_patch.35_16 = { ESCAPED NONLOCAL }
__op1_patch.37_72 = { ESCAPED NONLOCAL } same as __op1_patch.35_16
__op0_patch.38_18 = { ESCAPED NONLOCAL } same as __op1_patch.35_16
__op0_patch_neg.39_19 = { ESCAPED NONLOCAL } same as __op1_patch.35_16
__op0_vpatch.41_73 = { ESCAPED NONLOCAL }
__op0_vpatch.41_20 = { ESCAPED NONLOCAL } same as __op0_vpatch.41_73
res.0_21 = { ESCAPED NONLOCAL } same as __op0_vpatch.41_73
res.0_1 = { ESCAPED NONLOCAL } same as __op0_vpatch.41_73
res = { ESCAPED NONLOCAL } same as res.1_22
res.1_22 = { ESCAPED NONLOCAL }
res.5 = { ESCAPED NONLOCAL } same as __lhs_v1.2_24
__lhs_v1.2_24 = { ESCAPED NONLOCAL }
__lhs_v2.3_26 = { ESCAPED NONLOCAL } same as __lhs_v1.2_24
c.9 = { ESCAPED NONLOCAL } same as __rhs_v1.6_28
__rhs_v1.6_28 = { ESCAPED NONLOCAL }
__rhs_v2.7_30 = { ESCAPED NONLOCAL } same as __rhs_v1.6_28
D.6705_31 = { }
__rtn_v1.10_32 = { }
D.6706_33 = { }
__rtn_v2.11_34 = { }
lineage_spawn = { }
__rtn_v1.10_36 = { ESCAPED NONLOCAL }
__rtn_v1.10_2 = { ESCAPED NONLOCAL } same as __rtn_v1.10_36
res.1_41 = { ESCAPED NONLOCAL } same as res.1_22
res.18 = { ESCAPED NONLOCAL } same as __lhs_v1.15_43
__lhs_v1.15_43 = { ESCAPED NONLOCAL }
__lhs_v2.16_45 = { ESCAPED NONLOCAL } same as __lhs_v1.15_43
a.22 = { ESCAPED NONLOCAL } same as __rhs_v1.19_47
__rhs_v1.19_47 = { ESCAPED NONLOCAL }
__rhs_v2.20_49 = { ESCAPED NONLOCAL } same as __rhs_v1.19_47
D.6724_50 = { }
__rtn_v1.23_51 = { }
D.6725_52 = { }
__rtn_v2.24_53 = { }
__rtn_v1.23_55 = { ESCAPED NONLOCAL } same as __rtn_v1.10_36
__rtn_v1.23_3 = { ESCAPED NONLOCAL } same as __rtn_v1.10_36
D.6691_62 = { ANYTHING }
D.6692_63 = { ANYTHING } same as D.6691_62
printf = { }
puts = { }
D.6691_60 = { ANYTHING } same as D.6691_62
D.6692_61 = { ANYTHING } same as D.6691_62


Alias information for main

Aliased symbols

.MEM, UID D.6751, void, is global, default def: .MEM_69(D)
res.5, UID D.6696, vector(4) double, is addressable
res, UID D.6573, __m256d, is addressable
c.9, UID D.6701, vector(4) double, is addressable
res.18, UID D.6715, vector(4) double, is addressable
a.22, UID D.6720, vector(4) double, is addressable

Call clobber information

ESCAPED, points-to anything, points-to non-local

Flow-insensitive points-to information


main ()
{
  __m256d res;
  __m256d c;
  __m256d a;
  double D.6692;
  double D.6691;
  vector(4) double res.1;
  __m256d res.0;
  _Bool __cmp.25;
  _Bool D.6725;
  _Bool D.6724;
  int __rtn_v2.24;
  int __rtn_v1.23;
  vector(4) double a.22;
  double __rhs_v2.20;
  double __rhs_v1.19;
  vector(4) double res.18;
  double __lhs_v2.16;
  double __lhs_v1.15;
  _Bool __cmp.12;
  _Bool D.6706;
  _Bool D.6705;
  int __rtn_v2.11;
  int __rtn_v1.10;
  vector(4) double c.9;
  double __rhs_v2.7;
  double __rhs_v1.6;
  vector(4) double res.5;
  double __lhs_v2.3;
  double __lhs_v1.2;
  vector(4) double __op0_vpatch.41;
  double __op0_patch_neg.39;
  double __op0_patch.38;
  long unsigned int __op1_patch.37;
  long unsigned int __op1_patch.35;
  long int __exp_delta.34;
  long unsigned int __op1_exp1.32;
  __m256d res.30;
  long unsigned int __op0_exp0.29;
  vector(4) double __op1_copy.28;

<bb 2>:
  gimple_debug BIND <__A, 3.29123456791234502816223539412021636962890625e+2>
  gimple_assign <vector_cst, a_4, { 3.29123456791234502816223539412021636962890625e+2, 3.29123456791234502816223539412021636962890625e+2, 3.29123456791234502816223539412021636962890625e+2, 3.29123456791234502816223539412021636962890625e+2 }, NULL>
  gimple_debug BIND <a, NULL>
  gimple_debug BIND <__A, 3.291234567912343891293858177959918975830078125e+2>
  gimple_debug BIND <b, NULL>
  gimple_debug BIND <__A, 9.99999982451670044181213370393379591405391693115234375e-14>
  gimple_assign <vector_cst, c_6, { 9.99999982451670044181213370393379591405391693115234375e-14, 9.99999982451670044181213370393379591405391693115234375e-14, 9.99999982451670044181213370393379591405391693115234375e-14, 9.99999982451670044181213370393379591405391693115234375e-14 }, NULL>
  gimple_debug BIND <c, NULL>
  gimple_assign <vector_cst, __op1_copy.28, { 3.29123456791234502816223539412021636962890625e+2, 3.29123456791234502816223539412021636962890625e+2, 3.29123456791234502816223539412021636962890625e+2, 3.29123456791234502816223539412021636962890625e+2 }, NULL>
  gimple_assign <vector_cst, res.0_7, { 1.136868377216160297393798828125e-13, 1.136868377216160297393798828125e-13, 1.136868377216160297393798828125e-13, 1.136868377216160297393798828125e-13 }, NULL>
  gimple_assign <vector_cst, res.30, { 1.136868377216160297393798828125e-13, 1.136868377216160297393798828125e-13, 1.136868377216160297393798828125e-13, 1.136868377216160297393798828125e-13 }, NULL>
  gimple_assign <mem_ref, __op0_exp0.29_9, MEM[(vector(4) double *)&res.30], NULL>
  gimple_assign <bit_and_expr, __op0_exp0.29_10, __op0_exp0.29_9, 9218868437227405312>
  gimple_assign <mem_ref, __op1_exp1.32_12, MEM[(vector(4) double *)&__op1_copy.28], NULL>
  gimple_assign <bit_and_expr, __op1_exp1.32_13, __op1_exp1.32_12, 9218868437227405312>
  gimple_assign <minus_expr, __exp_delta.34_14, __op1_exp1.32_13, __op0_exp0.29_10>
  gimple_cond <gt_expr, __exp_delta.34_14, 216172782113783808, NULL, NULL>
    goto <bb 3>;
  else
    goto <bb 4>;

<bb 3>:
  gimple_assign <plus_expr, __op1_patch.35_15, __op1_exp1.32_13, 18208053293458915328>
  gimple_assign <bit_and_expr, __op1_patch.35_16, __op1_patch.35_15, 9218868437227405312>
  gimple_assign <ssa_name, __op1_patch.37_72, __op1_patch.35_16, NULL>
  gimple_assign <view_convert_expr, __op0_patch.38_18, VIEW_CONVERT_EXPR<double>(__op1_patch.37_72), NULL>
  gimple_assign <negate_expr, __op0_patch_neg.39_19, __op0_patch.38_18, NULL>
  gimple_assign <constructor, __op0_vpatch.41_73, {__op0_patch_neg.39_19, __op0_patch.38_18, 0.0, 0.0}, NULL>
  gimple_assign <ssa_name, __op0_vpatch.41_20, __op0_vpatch.41_73, NULL>
  gimple_assign <plus_expr, res.0_21, __op0_vpatch.41_20, { 1.136868377216160297393798828125e-13, 1.136868377216160297393798828125e-13, 1.136868377216160297393798828125e-13, 1.136868377216160297393798828125e-13 }>

<bb 4>:
  # gimple_phi <res.0_1, { 1.136868377216160297393798828125e-13, 1.136868377216160297393798828125e-13, 1.136868377216160297393798828125e-13, 1.136868377216160297393798828125e-13 }(2), res.0_21(3)>
  GIMPLE_NOP
  gimple_assign <ssa_name, res, res.0_1, NULL>
  gimple_assign <var_decl, res.1_22, res, NULL>
  gimple_assign <ssa_name, res.5, res.1_22, NULL>
  gimple_assign <mem_ref, __lhs_v1.2_24, MEM[(double *)&res.5], NULL>
  gimple_assign <mem_ref, __lhs_v2.3_26, MEM[(double *)&res.5 + 8B], NULL>
  gimple_assign <vector_cst, c.9, { 9.99999982451670044181213370393379591405391693115234375e-14, 9.99999982451670044181213370393379591405391693115234375e-14, 9.99999982451670044181213370393379591405391693115234375e-14, 9.99999982451670044181213370393379591405391693115234375e-14 }, NULL>
  gimple_assign <mem_ref, __rhs_v1.6_28, MEM[(double *)&c.9], NULL>
  gimple_assign <mem_ref, __rhs_v2.7_30, MEM[(double *)&c.9 + 8B], NULL>
  gimple_assign <gt_expr, D.6705_31, __lhs_v1.2_24, __rhs_v1.6_28>
  gimple_assign <nop_expr, __rtn_v1.10_32, D.6705_31, NULL>
  gimple_assign <gt_expr, D.6706_33, __lhs_v2.3_26, __rhs_v2.7_30>
  gimple_assign <nop_expr, __rtn_v2.11_34, D.6706_33, NULL>
  gimple_cond <ne_expr, __rtn_v1.10_32, __rtn_v2.11_34, NULL, NULL>
    goto <bb 5>;
  else
    goto <bb 6>;

<bb 5>:
  gimple_call <lineage_spawn, __rtn_v1.10_36, __rtn_v1.10_32, __rtn_v2.11_34, &res.5, &c.9, "../../../test/test1/test.c:36:5 res.1">
  gimple_debug BIND <D#2, &c.9>
  gimple_debug BIND <D#1, *D#2>
  gimple_debug BIND <c, D#1>

<bb 6>:
  # gimple_phi <__rtn_v1.10_2, __rtn_v1.10_32(4), __rtn_v1.10_36(5)>
  gimple_cond <eq_expr, __rtn_v1.10_2, 1, NULL, NULL>
    goto <bb 10>;
  else
    goto <bb 7>;

<bb 7>:
  gimple_assign <var_decl, res.1_41, res, NULL>
  gimple_assign <ssa_name, res.18, res.1_41, NULL>
  gimple_assign <mem_ref, __lhs_v1.15_43, MEM[(double *)&res.18], NULL>
  gimple_assign <mem_ref, __lhs_v2.16_45, MEM[(double *)&res.18 + 8B], NULL>
  gimple_assign <vector_cst, a.22, { 3.29123456791234502816223539412021636962890625e+2, 3.29123456791234502816223539412021636962890625e+2, 3.29123456791234502816223539412021636962890625e+2, 3.29123456791234502816223539412021636962890625e+2 }, NULL>
  gimple_assign <mem_ref, __rhs_v1.19_47, MEM[(double *)&a.22], NULL>
  gimple_assign <mem_ref, __rhs_v2.20_49, MEM[(double *)&a.22 + 8B], NULL>
  gimple_assign <gt_expr, D.6724_50, __lhs_v1.15_43, __rhs_v1.19_47>
  gimple_assign <nop_expr, __rtn_v1.23_51, D.6724_50, NULL>
  gimple_assign <gt_expr, D.6725_52, __lhs_v2.16_45, __rhs_v2.20_49>
  gimple_assign <nop_expr, __rtn_v2.24_53, D.6725_52, NULL>
  gimple_cond <ne_expr, __rtn_v1.23_51, __rtn_v2.24_53, NULL, NULL>
    goto <bb 8>;
  else
    goto <bb 9>;

<bb 8>:
  gimple_call <lineage_spawn, __rtn_v1.23_55, __rtn_v1.23_51, __rtn_v2.24_53, &res.18, &a.22, "../../../test/test1/test.c:36:14 res.1">
  gimple_debug BIND <D#4, &a.22>
  gimple_debug BIND <D#3, *D#4>
  gimple_debug BIND <a, D#3>

<bb 9>:
  # gimple_phi <__rtn_v1.23_3, __rtn_v1.23_51(7), __rtn_v1.23_55(8)>
  gimple_cond <eq_expr, __rtn_v1.23_3, 1, NULL, NULL>
    goto <bb 10>;
  else
    goto <bb 11>;

<bb 10>:
  gimple_assign <bit_field_ref, D.6691_62, BIT_FIELD_REF <res, 64, 64>, NULL>
  gimple_assign <bit_field_ref, D.6692_63, BIT_FIELD_REF <res, 64, 0>, NULL>
  gimple_call <printf, NULL, "T:%.17lf %.17lf\n", D.6692_63, D.6691_62>
  gimple_call <printf, NULL, "res:%lx\n", &res>
  gimple_call <__builtin_puts, NULL, &"true"[0]>
  goto <bb 12>;

<bb 11>:
  gimple_assign <bit_field_ref, D.6691_60, BIT_FIELD_REF <res, 64, 64>, NULL>
  gimple_assign <bit_field_ref, D.6692_61, BIT_FIELD_REF <res, 64, 0>, NULL>
  gimple_call <printf, NULL, "F:%.17lf %.17lf\n", D.6692_61, D.6691_60>
  gimple_call <printf, NULL, "res:%lx\n", &res>
  gimple_call <__builtin_puts, NULL, &"false"[0]>

<bb 12>:
  gimple_assign <constructor, res, {CLOBBER}, NULL>
  gimple_return <NULL>

}



;; Function _GLOBAL__sub_I_00099_0_main (_GLOBAL__sub_I_00099_0_main, funcdef_no=813, return=void_type, decl_uid=6771, cgraph_uid=0)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
lineage_init = { }


Alias information for _GLOBAL__sub_I_00099_0_main

Aliased symbols

.MEM, UID D.6773, void, is global, default def: .MEM_1(D)

Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


_GLOBAL__sub_I_00099_0_main ()
{
<bb 2>:
  gimple_call <lineage_init, NULL>
  gimple_return <NULL>

}



;; Function _GLOBAL__sub_D_00099_1_main (_GLOBAL__sub_D_00099_1_main, funcdef_no=814, return=void_type, decl_uid=6777, cgraph_uid=788)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
lineage_fini = { }


Alias information for _GLOBAL__sub_D_00099_1_main

Aliased symbols

.MEM, UID D.6779, void, is global, default def: .MEM_1(D)

Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


_GLOBAL__sub_D_00099_1_main ()
{
<bb 2>:
  gimple_call <lineage_fini, NULL>
  gimple_return <NULL>

}


