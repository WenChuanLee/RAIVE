
;; Function main (main, funcdef_no=812, return=integer_type, decl_uid=6567, cgraph_uid=812) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
res = &NONLOCAL
res.5 = &NONLOCAL
c.9 = &NONLOCAL
ESCAPED = &NULL
ESCAPED = &NONLOCAL
ESCAPED = &res.5
ESCAPED = &c.9
ESCAPED = &READONLY
__rtn_v1.10_36 = NONLOCAL
res.1_41 = res
res.18 = res.1_41
__lhs_v1.15_43 = res.18
__lhs_v2.16_45 = res.18
a.22 = &NONLOCAL
__rtn_v1.23_51 = D.6724_50
__rtn_v2.24_53 = D.6725_52
ESCAPED = __rtn_v1.23_51
ESCAPED = __rtn_v2.24_53
ESCAPED = &res.18
ESCAPED = &a.22
ESCAPED = &READONLY
__rtn_v1.23_55 = NONLOCAL
__rtn_v1.23_3 = __rtn_v1.23_51
__rtn_v1.23_3 = __rtn_v1.23_55
D.6691_62 = &ANYTHING
D.6692_63 = &ANYTHING
ESCAPED = &READONLY
ESCAPED = D.6692_63
ESCAPED = D.6691_62
ESCAPED = &READONLY
ESCAPED = &res
ESCAPED = &READONLY
D.6691_60 = &ANYTHING
D.6692_61 = &ANYTHING
ESCAPED = &READONLY
ESCAPED = D.6692_61
ESCAPED = D.6691_60
ESCAPED = &READONLY
ESCAPED = &res
ESCAPED = &READONLY

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { NULL ANYTHING READONLY ESCAPED NONLOCAL res res.5 c.9 res.18 a.22 }
NONLOCAL = { ESCAPED NONLOCAL } same as __rtn_v1.10_36
STOREDANYTHING = { ESCAPED NONLOCAL }
INTEGER = { ANYTHING }
res = { ESCAPED NONLOCAL } same as res.1_41
res.5 = { ESCAPED NONLOCAL }
c.9 = { ESCAPED NONLOCAL }
lineage_spawn = { }
__rtn_v1.10_36 = { ESCAPED NONLOCAL }
res.1_41 = { ESCAPED NONLOCAL }
res.18 = { ESCAPED NONLOCAL } same as __lhs_v1.15_43
__lhs_v1.15_43 = { ESCAPED NONLOCAL }
__lhs_v2.16_45 = { ESCAPED NONLOCAL } same as __lhs_v1.15_43
a.22 = { ESCAPED NONLOCAL }
D.6724_50 = { }
__rtn_v1.23_51 = { }
D.6725_52 = { }
__rtn_v2.24_53 = { }
__rtn_v1.23_55 = { ESCAPED NONLOCAL } same as __rtn_v1.10_36
__rtn_v1.23_3 = { ESCAPED NONLOCAL } same as __rtn_v1.10_36
D.6691_62 = { ANYTHING }
D.6692_63 = { ANYTHING } same as D.6691_62
printf = { }
puts = { }
D.6691_60 = { ANYTHING } same as D.6691_62
D.6692_61 = { ANYTHING } same as D.6691_62


Alias information for main

Aliased symbols

.MEM, UID D.6751, void, is global, default def: .MEM_69(D)
res.5, UID D.6696, vector(4) double, is addressable
res, UID D.6573, __m256d, is addressable
c.9, UID D.6701, vector(4) double, is addressable
res.18, UID D.6715, vector(4) double, is addressable
a.22, UID D.6720, vector(4) double, is addressable

Call clobber information

ESCAPED, points-to anything, points-to non-local, points-to NULL

Flow-insensitive points-to information


;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 9 3 10 4 5 11 6 7 8
;; 2 succs { 9 3 }
;; 9 succs { 6 }
;; 3 succs { 4 10 }
;; 10 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 11 7 }
;; 11 succs { 6 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 1 }
find_duplicates: <bb 9> duplicate of <bb 11>
Removing basic block 11

Symbols to be put in SSA form
{ .MEM }
Incremental SSA update started at block: 0
Number of blocks in CFG: 12
Number of blocks to update: 10 ( 83%)


main ()
{
  __m256d res;
  double D.6692;
  double D.6691;
  vector(4) double res.1;
  _Bool D.6725;
  _Bool D.6724;
  int __rtn_v2.24;
  int __rtn_v1.23;
  vector(4) double a.22;
  vector(4) double res.18;
  double __lhs_v2.16;
  double __lhs_v1.15;
  int __rtn_v1.10;
  vector(4) double c.9;
  vector(4) double res.5;

<bb 2>:
  gimple_debug BIND <__A, 3.29123456791234502816223539412021636962890625e+2>
  gimple_debug BIND <a, NULL>
  gimple_debug BIND <__A, 3.291234567912343891293858177959918975830078125e+2>
  gimple_debug BIND <b, NULL>
  gimple_debug BIND <__A, 9.99999982451670044181213370393379591405391693115234375e-14>
  gimple_debug BIND <c, NULL>
  gimple_assign <vector_cst, res, { 8.5265128291212022304534912109375e-14, 1.42108547152020037174224853515625e-13, 1.136868377216160297393798828125e-13, 1.136868377216160297393798828125e-13 }, NULL>
  gimple_assign <vector_cst, res.5, { 8.5265128291212022304534912109375e-14, 1.42108547152020037174224853515625e-13, 1.136868377216160297393798828125e-13, 1.136868377216160297393798828125e-13 }, NULL>
  gimple_assign <vector_cst, c.9, { 9.99999982451670044181213370393379591405391693115234375e-14, 9.99999982451670044181213370393379591405391693115234375e-14, 9.99999982451670044181213370393379591405391693115234375e-14, 9.99999982451670044181213370393379591405391693115234375e-14 }, NULL>
  gimple_call <lineage_spawn, __rtn_v1.10_36, 0, 1, &res.5, &c.9, "../../../test/test1/test.c:36:5 res.1">
  gimple_debug BIND <D#2, &c.9>
  gimple_debug BIND <D#1, *D#2>
  gimple_debug BIND <c, D#1>
  gimple_cond <eq_expr, __rtn_v1.10_36, 1, NULL, NULL>
    goto <bb 9>;
  else
    goto <bb 3>;

<bb 9>:
  goto <bb 6>;

<bb 3>:
  gimple_assign <var_decl, res.1_41, res, NULL>
  gimple_assign <ssa_name, res.18, res.1_41, NULL>
  gimple_assign <mem_ref, __lhs_v1.15_43, MEM[(double *)&res.18], NULL>
  gimple_assign <mem_ref, __lhs_v2.16_45, MEM[(double *)&res.18 + 8B], NULL>
  gimple_assign <vector_cst, a.22, { 3.29123456791234502816223539412021636962890625e+2, 3.29123456791234502816223539412021636962890625e+2, 3.29123456791234502816223539412021636962890625e+2, 3.29123456791234502816223539412021636962890625e+2 }, NULL>
  gimple_assign <gt_expr, D.6724_50, __lhs_v1.15_43, 3.29123456791234502816223539412021636962890625e+2>
  gimple_assign <nop_expr, __rtn_v1.23_51, D.6724_50, NULL>
  gimple_assign <gt_expr, D.6725_52, __lhs_v2.16_45, 3.29123456791234502816223539412021636962890625e+2>
  gimple_assign <nop_expr, __rtn_v2.24_53, D.6725_52, NULL>
  gimple_cond <ne_expr, __rtn_v1.23_51, __rtn_v2.24_53, NULL, NULL>
    goto <bb 4>;
  else
    goto <bb 10>;

<bb 10>:
  goto <bb 5>;

<bb 4>:
  gimple_call <lineage_spawn, __rtn_v1.23_55, __rtn_v1.23_51, __rtn_v2.24_53, &res.18, &a.22, "../../../test/test1/test.c:36:14 res.1">
  gimple_debug BIND <D#4, &a.22>
  gimple_debug BIND <D#3, *D#4>
  gimple_debug BIND <a, D#3>

<bb 5>:
  # gimple_phi <__rtn_v1.23_3, __rtn_v1.23_51(10), __rtn_v1.23_55(4)>
  gimple_cond <eq_expr, __rtn_v1.23_3, 1, NULL, NULL>
    goto <bb 9>;
  else
    goto <bb 7>;

<bb 6>:
  gimple_assign <bit_field_ref, D.6691_62, BIT_FIELD_REF <res, 64, 64>, NULL>
  gimple_assign <bit_field_ref, D.6692_63, BIT_FIELD_REF <res, 64, 0>, NULL>
  gimple_call <printf, NULL, "T:%.17lf %.17lf\n", D.6692_63, D.6691_62>
  gimple_call <printf, NULL, "res:%lx\n", &res>
  gimple_call <__builtin_puts, NULL, &"true"[0]>
  goto <bb 8>;

<bb 7>:
  gimple_assign <bit_field_ref, D.6691_60, BIT_FIELD_REF <res, 64, 64>, NULL>
  gimple_assign <bit_field_ref, D.6692_61, BIT_FIELD_REF <res, 64, 0>, NULL>
  gimple_call <printf, NULL, "F:%.17lf %.17lf\n", D.6692_61, D.6691_60>
  gimple_call <printf, NULL, "res:%lx\n", &res>
  gimple_call <__builtin_puts, NULL, &"false"[0]>

<bb 8>:
  gimple_assign <constructor, res, {CLOBBER}, NULL>
  gimple_return <NULL>

}



;; Function _GLOBAL__sub_I_00099_0_main (_GLOBAL__sub_I_00099_0_main, funcdef_no=813, return=void_type, decl_uid=6771, cgraph_uid=0) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
lineage_init = { }


Alias information for _GLOBAL__sub_I_00099_0_main

Aliased symbols

.MEM, UID D.6773, void, is global, default def: .MEM_1(D)

Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
_GLOBAL__sub_I_00099_0_main ()
{
<bb 2>:
  gimple_call <lineage_init, NULL>
  gimple_return <NULL>

}



;; Function _GLOBAL__sub_D_00099_1_main (_GLOBAL__sub_D_00099_1_main, funcdef_no=814, return=void_type, decl_uid=6777, cgraph_uid=788) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
READONLY = &READONLY
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
READONLY = { READONLY }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
lineage_fini = { }


Alias information for _GLOBAL__sub_D_00099_1_main

Aliased symbols

.MEM, UID D.6779, void, is global, default def: .MEM_1(D)

Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
_GLOBAL__sub_D_00099_1_main ()
{
<bb 2>:
  gimple_call <lineage_fini, NULL>
  gimple_return <NULL>

}


